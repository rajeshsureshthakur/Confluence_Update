<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
            color: #333;
        }
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .input-group {
            margin-bottom: 20px;
        }
        .label {
            display: block;
            margin-bottom: 5px;
            color: #555;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        th {
            background-color: #fafafa;
            font-weight: 500;
        }
        button {
            padding: 8px 16px;
            background-color: #0052cc;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #0047b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="input-group">
            <label class="label">Last Test Results (Transaction Name, Response Time, Pass Count, Fail Count)</label>
            <input type="file" id="lastResultsFile" accept=".csv">
        </div>

        <div class="input-group">
            <label class="label">Test Planning Data (Transaction Name, Script Name, SLA, Planned TPH, Previous VUsers)</label>
            <input type="file" id="planningDataFile" accept=".csv">
        </div>

        <button onclick="calculateVUsers()">Calculate</button>

        <table id="recommendations">
            <tr>
                <th>Script Name</th>
                <th>Current TPH</th>
                <th>Target TPH</th>
                <th>Current VUsers</th>
                <th>Recommended VUsers</th>
                <th>Notes</th>
            </tr>
        </table>
    </div>

    <script>
        function processCSVFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (e) => resolve(e.target.result.trim().split('\n').map(row => row.split(',').map(cell => cell.trim())));
                reader.onerror = reject;
                reader.readAsText(file);
            });
        }

        async function calculateVUsers() {
            const lastResultsFile = document.getElementById('lastResultsFile').files[0];
            const planningDataFile = document.getElementById('planningDataFile').files[0];
            
            if (!lastResultsFile || !planningDataFile) {
                alert('Please select both CSV files');
                return;
            }

            try {
                const lastResults = await processCSVFile(lastResultsFile);
                const planningData = await processCSVFile(planningDataFile);

                const lastResultsObj = lastResults.map(row => ({
                    transactionName: row[0],
                    responseTime: parseFloat(row[1]),
                    passCount: parseInt(row[2]),
                    failCount: parseInt(row[3])
                }));

                const planningDataObj = planningData.map(row => ({
                    transactionName: row[0],
                    scriptName: row[1],
                    sla: parseFloat(row[2]),
                    plannedTph: parseInt(row[3]),
                    previousVUsers: parseInt(row[4])
                }));

                const recommendations = document.getElementById('recommendations');
                while (recommendations.rows.length > 1) {
                    recommendations.deleteRow(1);
                }

                const scriptData = {};
                planningDataObj.forEach(plan => {
                    if (!scriptData[plan.scriptName]) {
                        scriptData[plan.scriptName] = {
                            currentTph: 0,
                            targetTph: plan.plannedTph,
                            currentVUsers: plan.previousVUsers,
                            transactions: []
                        };
                    }
                    
                    const lastResult = lastResultsObj.find(r => r.transactionName === plan.transactionName);
                    if (lastResult) {
                        const tph = (lastResult.passCount + lastResult.failCount) / 24;
                        scriptData[plan.scriptName].currentTph += tph;
                        scriptData[plan.scriptName].transactions.push({
                            name: plan.transactionName,
                            sla: plan.sla,
                            responseTime: lastResult.responseTime
                        });
                    }
                });

                Object.entries(scriptData).forEach(([scriptName, data]) => {
                    const row = recommendations.insertRow(-1);
                    
                    row.insertCell(0).textContent = scriptName;
                    row.insertCell(1).textContent = data.currentTph.toFixed(2);
                    row.insertCell(2).textContent = data.targetTph;
                    row.insertCell(3).textContent = data.currentVUsers;
                    
                    let recommendedVUsers = Math.ceil((data.targetTph / data.currentTph) * data.currentVUsers);
                    row.insertCell(4).textContent = recommendedVUsers;
                    
                    let notes = [];
                    data.transactions.forEach(t => {
                        if (t.responseTime > t.sla) {
                            notes.push(`${t.name} exceeds SLA`);
                        }
                    });
                    
                    if (recommendedVUsers > data.currentVUsers * 1.5) {
                        notes.push(`Large VUser increase`);
                    }
                    
                    row.insertCell(5).textContent = notes.join("; ");
                });
            } catch (error) {
                alert('Error processing files');
            }
        }
    </script>
</body>
</html>
