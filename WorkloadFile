<!DOCTYPE html>
<html>
<body>
    <div>
        <table style="width:100%; margin-bottom:10px; border:1px solid #ccc; padding:10px; background:#f5f5f5;">
            <tr>
                <td>
                    <div style="margin:5px 0;">
                        <label style="display:block; margin-bottom:5px;"><b>Last Test Results CSV</b> (Transaction Name, Response Time, Pass Count)</label>
                        <input type="file" id="lastResultsFile" accept=".csv">
                    </div>
                    <div style="margin:5px 0;">
                        <label style="display:block; margin-bottom:5px;"><b>Test Planning Data CSV</b> (Transaction Name, Script Name, Planned TPH, Previous VUsers, Think Time, Pacing)</label>
                        <input type="file" id="planningDataFile" accept=".csv">
                    </div>
                    <div style="margin:10px 0;">
                        <button onclick="calculateVUsers()" style="padding:5px 10px; background:#0052cc; color:white; border:none; border-radius:3px;">Calculate VUsers</button>
                    </div>
                </td>
            </tr>
        </table>

        <table id="recommendations" style="width:100%; border-collapse:collapse; border:1px solid #ccc;">
            <tr style="background:#f5f5f5;">
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Script Name</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Current TPH</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Target TPH</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">TPH Change %</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Response Time Total</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Think Time Total</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Current Pacing</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Suggested Pacing</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Current VUsers</th>
                <th style="padding:8px; border:1px solid #ccc; text-align:center;">Recommended VUsers</th>
            </tr>
        </table>
    </div>

    <script>
        function processCSVFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (e) => resolve(e.target.result.trim().split('\n').map(row => row.split(',').map(cell => cell.trim())));
                reader.onerror = reject;
                reader.readAsText(file);
            });
        }

        function calculateWorkloadParameters(currentTph, targetTph, totalResponseTime, totalThinkTime, currentPacing, currentVUsers) {
            const tphChangePercent = ((targetTph - currentTph) / currentTph) * 100;
            
            // Calculate VUsers using the formula: (Planned_TPH * (Response_Time + Think_Time)) / 3600
            const recommendedVUsers = Math.ceil((targetTph * (totalResponseTime + totalThinkTime)) / 3600);
            
            // Calculate suggested pacing based on the new VUser count
            let suggestedPacing = Math.ceil(3600 / (targetTph / recommendedVUsers));
            suggestedPacing = Math.max(5, suggestedPacing); // Minimum 5s pacing

            return {
                vusers: recommendedVUsers,
                pacing: suggestedPacing,
                tphChangePercent: tphChangePercent
            };
        }

        async function calculateVUsers() {
            const lastResultsFile = document.getElementById('lastResultsFile').files[0];
            const planningDataFile = document.getElementById('planningDataFile').files[0];
            
            if (!lastResultsFile || !planningDataFile) {
                alert('Please select both CSV files');
                return;
            }

            try {
                const lastResults = await processCSVFile(lastResultsFile);
                const planningData = await processCSVFile(planningDataFile);

                const transactionToScript = {};
                const scriptInfo = {};

                // Process planning data (Sheet 2)
                for (let i = 1; i < planningData.length; i++) {
                    const row = planningData[i];
                    const transactionName = row[0];
                    const scriptName = row[1];
                    const plannedTph = parseInt(row[2]);
                    const vusers = parseInt(row[3]);
                    const thinkTime = parseFloat(row[4]);
                    const pacing = parseInt(row[5]);

                    transactionToScript[transactionName] = scriptName;
                    
                    if (!scriptInfo[scriptName]) {
                        scriptInfo[scriptName] = {
                            totalPlannedTph: 0,
                            vusers: vusers,
                            totalThinkTime: 0,
                            pacing: pacing,
                            transactions: new Set(),
                            totalPassCount: 0,
                            totalResponseTime: 0
                        };
                    }
                    scriptInfo[scriptName].totalPlannedTph += plannedTph;
                    scriptInfo[scriptName].totalThinkTime += thinkTime;
                    scriptInfo[scriptName].transactions.add(transactionName);
                }

                // Process last results (Sheet 1)
                for (let i = 1; i < lastResults.length; i++) {
                    const row = lastResults[i];
                    const transactionName = row[0];
                    const responseTime = parseFloat(row[1]);
                    const passCount = parseInt(row[2]);
                    const scriptName = transactionToScript[transactionName];
                    
                    if (scriptName && scriptInfo[scriptName]) {
                        scriptInfo[scriptName].totalPassCount += passCount;
                        scriptInfo[scriptName].totalResponseTime += responseTime;
                    }
                }

                const table = document.getElementById('recommendations');
                while (table.rows.length > 1) {
                    table.deleteRow(1);
                }

                Object.entries(scriptInfo).forEach(([scriptName, info]) => {
                    const recommendation = calculateWorkloadParameters(
                        info.totalPassCount,
                        info.totalPlannedTph,
                        info.totalResponseTime,
                        info.totalThinkTime,
                        info.pacing,
                        info.vusers
                    );

                    const row = table.insertRow(-1);
                    
                    // Define common cell style for center alignment
                    const cellStyle = "padding:8px; border:1px solid #ccc; text-align:center;";
                    
                    // Insert cells with inline styles
                    row.insertCell(0).outerHTML = `<td style="${cellStyle}">${scriptName}</td>`;
                    row.insertCell(1).outerHTML = `<td style="${cellStyle}">${info.totalPassCount.toFixed(0)}</td>`;
                    row.insertCell(2).outerHTML = `<td style="${cellStyle}">${info.totalPlannedTph}</td>`;
                    
                    const changeStyle = recommendation.tphChangePercent > 0 ? "color:#006644;" : "color:#bf2600;";
                    row.insertCell(3).outerHTML = `<td style="${cellStyle} ${changeStyle}">${recommendation.tphChangePercent.toFixed(1)}%</td>`;
                    
                    row.insertCell(4).outerHTML = `<td style="${cellStyle}">${info.totalResponseTime.toFixed(1)}s</td>`;
                    row.insertCell(5).outerHTML = `<td style="${cellStyle}">${info.totalThinkTime.toFixed(1)}s</td>`;
                    row.insertCell(6).outerHTML = `<td style="${cellStyle}">${info.pacing.toFixed(1)}s</td>`;
                    row.insertCell(7).outerHTML = `<td style="${cellStyle}">${recommendation.pacing.toFixed(1)}s</td>`;
                    row.insertCell(8).outerHTML = `<td style="${cellStyle}">${info.vusers}</td>`;
                    row.insertCell(9).outerHTML = `<td style="${cellStyle}">${recommendation.vusers}</td>`;
                });
            } catch (error) {
                alert('Error processing files: ' + error.message);
            }
        }
    </script>
</body>
</html>
