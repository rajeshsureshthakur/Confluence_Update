<!DOCTYPE html>
<html>
<head>
    <style>
        .input-section {
            margin: 10px 0;
        }
        .calculate-btn {
            margin: 10px 0;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 10px 0;
            color: #172B4D;
        }
        th {
            background-color: #F4F5F7;
            font-weight: bold;
            text-align: left;
            border: 1px solid #DFE1E6;
            padding: 7px 10px;
            font-size: 14px;
        }
        td {
            border: 1px solid #DFE1E6;
            padding: 7px 10px;
            vertical-align: top;
            font-size: 14px;
        }
        tr:hover {
            background-color: #F8F9FA;
        }
        .numeric {
            text-align: right;
            font-family: monospace;
        }
        .warning {
            color: #DE350B;
        }
        .suggestion {
            color: #0747A6;
        }
    </style>
</head>
<body>
    <div class="input-section">
        <label>Last Test Results CSV (Transaction Name, Response Time, Pass Count, Fail Count)</label><br>
        <input type="file" id="lastResultsFile" accept=".csv">
    </div>

    <div class="input-section">
        <label>Test Planning Data CSV (Transaction Name, Script Name, SLA, Planned TPH, Previous VUsers, Think Time, Pacing)</label><br>
        <input type="file" id="planningDataFile" accept=".csv">
    </div>

    <div class="calculate-btn">
        <button onclick="calculateVUsers()">Calculate VUsers</button>
    </div>

    <table id="recommendations">
        <tr>
            <th>Script Name</th>
            <th>Current TPH</th>
            <th>Target TPH</th>
            <th>Response Time (avg)</th>
            <th>Think Time</th>
            <th>Pacing</th>
            <th>Current VUsers</th>
            <th>Recommended VUsers</th>
            <th>Suggestions</th>
        </tr>
    </table>

    <script>
        function processCSVFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (e) => resolve(e.target.result.trim().split('\n').map(row => row.split(',').map(cell => cell.trim())));
                reader.onerror = reject;
                reader.readAsText(file);
            });
        }

        function calculateRealisticParameters(data, avgResponseTime) {
            // Calculate TPH per user based on current metrics
            const currentTphPerUser = data.currentTph / data.currentVUsers;
            
            // Calculate iteration time based on actual measurements
            const measuredIterationTime = 3600 / currentTphPerUser;
            
            // Calculate base VUsers needed for target TPH
            let recommendedVUsers = Math.ceil((data.targetTph * measuredIterationTime) / 3600);
            
            // If VUser change is more than 30%, optimize pacing first
            const vuserChange = ((recommendedVUsers - data.currentVUsers) / data.currentVUsers) * 100;
            let suggestions = [];
            let adjustedPacing = data.pacing;
            let adjustedThinkTime = data.totalThinkTime / data.transactionCount;

            if (Math.abs(vuserChange) > 30) {
                if (vuserChange > 0) {
                    // If we need more VUsers, try reducing pacing first
                    const minPacing = Math.max(1, data.pacing / 2); // Don't reduce pacing below 1 second
                    adjustedPacing = Math.max(minPacing, data.pacing * 0.7);
                    
                    // Recalculate VUsers with new pacing
                    const newIterationTime = avgResponseTime + adjustedThinkTime + adjustedPacing;
                    const iterationsPerHour = 3600 / newIterationTime;
                    recommendedVUsers = Math.ceil(data.targetTph / iterationsPerHour);
                    
                    suggestions.push(`Consider reducing pacing to ${adjustedPacing.toFixed(1)}s to optimize VUser count`);
                } else {
                    // If we need fewer VUsers, consider increasing pacing
                    adjustedPacing = Math.min(60, data.pacing * 1.3); // Don't increase pacing beyond 60 seconds
                    
                    // Recalculate VUsers with new pacing
                    const newIterationTime = avgResponseTime + adjustedThinkTime + adjustedPacing;
                    const iterationsPerHour = 3600 / newIterationTime;
                    recommendedVUsers = Math.ceil(data.targetTph / iterationsPerHour);
                    
                    suggestions.push(`Consider increasing pacing to ${adjustedPacing.toFixed(1)}s to optimize VUser count`);
                }
            }

            // Add performance warnings
            if (avgResponseTime > data.transactions[0].sla) {
                suggestions.push(`High response time detected. Consider performance optimization before adding more VUsers`);
            }

            return {
                vusers: recommendedVUsers,
                pacing: adjustedPacing,
                thinkTime: adjustedThinkTime,
                suggestions: suggestions
            };
        }

        async function calculateVUsers() {
            const lastResultsFile = document.getElementById('lastResultsFile').files[0];
            const planningDataFile = document.getElementById('planningDataFile').files[0];
            
            if (!lastResultsFile || !planningDataFile) {
                alert('Please select both CSV files');
                return;
            }

            try {
                const lastResults = await processCSVFile(lastResultsFile);
                const planningData = await processCSVFile(planningDataFile);

                const lastResultsObj = lastResults.map(row => ({
                    transactionName: row[0],
                    responseTime: parseFloat(row[1]),
                    passCount: parseInt(row[2]),
                    failCount: parseInt(row[3])
                }));

                const planningDataObj = planningData.map(row => ({
                    transactionName: row[0],
                    scriptName: row[1],
                    sla: parseFloat(row[2]),
                    plannedTph: parseInt(row[3]),
                    previousVUsers: parseInt(row[4]),
                    thinkTime: parseFloat(row[5]),
                    pacing: parseInt(row[6])
                }));

                const recommendations = document.getElementById('recommendations');
                while (recommendations.rows.length > 1) {
                    recommendations.deleteRow(1);
                }

                const scriptData = {};
                planningDataObj.forEach(plan => {
                    if (!scriptData[plan.scriptName]) {
                        scriptData[plan.scriptName] = {
                            currentTph: 0,
                            targetTph: plan.plannedTph,
                            currentVUsers: plan.previousVUsers,
                            pacing: plan.pacing,
                            transactions: [],
                            totalResponseTime: 0,
                            totalThinkTime: 0,
                            transactionCount: 0
                        };
                    }
                    
                    const lastResult = lastResultsObj.find(r => r.transactionName === plan.transactionName);
                    if (lastResult) {
                        const tph = (lastResult.passCount + lastResult.failCount) / 24;
                        scriptData[plan.scriptName].currentTph += tph;
                        scriptData[plan.scriptName].totalResponseTime += lastResult.responseTime;
                        scriptData[plan.scriptName].totalThinkTime += plan.thinkTime;
                        scriptData[plan.scriptName].transactionCount++;
                        scriptData[plan.scriptName].transactions.push({
                            name: plan.transactionName,
                            sla: plan.sla,
                            responseTime: lastResult.responseTime,
                            thinkTime: plan.thinkTime
                        });
                    }
                });

                Object.entries(scriptData).forEach(([scriptName, data]) => {
                    const row = recommendations.insertRow(-1);
                    const avgResponseTime = data.totalResponseTime / data.transactionCount;
                    
                    const recommendation = calculateRealisticParameters(data, avgResponseTime);

                    // Populate table cells
                    row.insertCell(0).textContent = scriptName;
                    row.insertCell(1).textContent = data.currentTph.toFixed(2);
                    row.insertCell(2).textContent = data.targetTph;
                    row.insertCell(3).textContent = avgResponseTime.toFixed(2) + 's';
                    row.insertCell(4).textContent = recommendation.thinkTime.toFixed(1) + 's';
                    row.insertCell(5).textContent = recommendation.pacing.toFixed(1) + 's';
                    row.insertCell(6).textContent = data.currentVUsers;
                    row.insertCell(7).textContent = recommendation.vusers;
                    row.insertCell(8).textContent = recommendation.suggestions.join('\n');

                    // Apply styling
                    [1,2,3,4,5,6,7].forEach(index => {
                        row.cells[index].className = 'numeric';
                    });
                    
                    if (recommendation.suggestions.length > 0) {
                        row.cells[8].className = 'suggestion';
                    }
                });
            } catch (error) {
                alert('Error processing files: ' + error.message);
            }
        }
    </script>
</body>
</html>
