<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            margin: 20px;
            color: #172B4D;
            background-color: #F4F5F7;
        }
        .input-section { 
            margin: 20px 0;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .calculate-btn { 
            margin: 20px 0; 
        }
        .table-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            max-height: 600px;
            overflow-y: auto;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin: 0;
            box-shadow: 0 0 0 1px #DFE1E6;
        }
        th {
            background-color: #0052CC;
            color: white;
            font-weight: 500;
            text-align: left;
            border: 1px solid #0065FF;
            padding: 12px 15px;
            font-size: 14px;
            position: sticky;
            top: 0;
        }
        td {
            border: 1px solid #DFE1E6;
            padding: 12px 15px;
            font-size: 14px;
            background: white;
        }
        tr:hover td { 
            background-color: #F8F9FA; 
        }
        .numeric {
            text-align: right;
            font-family: monospace;
        }
        .increase { 
            color: #00875A;
            font-weight: 500;
        }
        .decrease { 
            color: #DE350B;
            font-weight: 500;
        }
        button {
            padding: 10px 20px;
            background-color: #0052CC;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }
        button:hover {
            background-color: #0065FF;
        }
        input[type="file"] {
            margin-top: 8px;
            padding: 8px;
            border: 1px solid #DFE1E6;
            border-radius: 4px;
            width: 100%;
            box-sizing: border-box;
        }
        label {
            font-weight: 500;
            color: #172B4D;
        }
    </style>
</head>
<body>
    <div class="input-section">
        <label>Last Test Results CSV (Transaction Name, Response Time, Pass Count, Fail Count)</label><br>
        <input type="file" id="lastResultsFile" accept=".csv">
    </div>

    <div class="input-section">
        <label>Test Planning Data CSV (Transaction Name, Script Name, SLA, Planned TPH, Previous VUsers, Think Time, Pacing)</label><br>
        <input type="file" id="planningDataFile" accept=".csv">
    </div>

    <div class="calculate-btn">
        <button onclick="calculateVUsers()">Calculate VUsers</button>
    </div>

    <div class="table-container">
        <table id="recommendations">
            <tr>
                <th>Script Name</th>
                <th>Current TPH</th>
                <th>Target TPH</th>
                <th>TPH Change %</th>
                <th>Current Think Time</th>
                <th>Suggested Think Time</th>
                <th>Current Pacing</th>
                <th>Suggested Pacing</th>
                <th>Current VUsers</th>
                <th>Recommended VUsers</th>
            </tr>
        </table>
    </div>

    <script>
        function processCSVFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (e) => resolve(e.target.result.trim().split('\n').map(row => row.split(',').map(cell => cell.trim())));
                reader.onerror = reject;
                reader.readAsText(file);
            });
        }

        function calculateWorkloadParameters(currentTph, targetTph, currentThinkTime, currentPacing, currentVUsers) {
            const tphChangePercent = ((targetTph - currentTph) / currentTph) * 100;
            
            let recommendedVUsers = currentVUsers;
            let suggestedThinkTime = currentThinkTime;
            let suggestedPacing = currentPacing;

            if (tphChangePercent !== 0) {
                // 70% of change through VUsers
                const vuserChangePercent = tphChangePercent * 0.7;
                recommendedVUsers = Math.max(1, Math.ceil(currentVUsers * (1 + (vuserChangePercent / 100))));

                // Remaining 30% through pacing and think time adjustments
                if (tphChangePercent > 0) {
                    const timeReductionPercent = tphChangePercent * 0.3;
                    
                    if (currentPacing > 5) {
                        suggestedPacing = Math.max(5, Math.ceil(currentPacing * (1 - (timeReductionPercent / 200))));
                    }
                    
                    if (currentThinkTime > 1) {
                        suggestedThinkTime = Math.max(1, Math.ceil(currentThinkTime * (1 - (timeReductionPercent / 200))));
                    }
                } else {
                    const timeIncreasePercent = Math.abs(tphChangePercent * 0.3);
                    suggestedPacing = Math.ceil(currentPacing * (1 + (timeIncreasePercent / 200)));
                    suggestedThinkTime = Math.ceil(currentThinkTime * (1 + (timeIncreasePercent / 200)));
                }
            }

            return {
                vusers: recommendedVUsers,
                thinkTime: suggestedThinkTime,
                pacing: suggestedPacing,
                tphChangePercent: tphChangePercent
            };
        }

        async function calculateVUsers() {
            const lastResultsFile = document.getElementById('lastResultsFile').files[0];
            const planningDataFile = document.getElementById('planningDataFile').files[0];
            
            if (!lastResultsFile || !planningDataFile) {
                alert('Please select both CSV files');
                return;
            }

            try {
                const lastResults = await processCSVFile(lastResultsFile);
                const planningData = await processCSVFile(planningDataFile);

                const transactionToScript = {};
                const scriptInfo = {};

                // Process planning data (Sheet 2)
                for (let i = 1; i < planningData.length; i++) {
                    const row = planningData[i];
                    const transactionName = row[0];
                    const scriptName = row[1];
                    const plannedTph = parseInt(row[3]);
                    const vusers = parseInt(row[4]);
                    const thinkTime = parseFloat(row[5]);
                    const pacing = parseInt(row[6]);

                    transactionToScript[transactionName] = scriptName;
                    
                    if (!scriptInfo[scriptName]) {
                        scriptInfo[scriptName] = {
                            totalPlannedTph: 0,
                            vusers: vusers,
                            thinkTime: thinkTime,
                            pacing: pacing,
                            transactions: new Set(),
                            totalPassCount: 0
                        };
                    }
                    scriptInfo[scriptName].totalPlannedTph += plannedTph;
                    scriptInfo[scriptName].transactions.add(transactionName);
                }

                // Process last results (Sheet 1)
                for (let i = 1; i < lastResults.length; i++) {
                    const row = lastResults[i];
                    const transactionName = row[0];
                    const passCount = parseInt(row[2]);
                    const scriptName = transactionToScript[transactionName];
                    
                    if (scriptName && scriptInfo[scriptName]) {
                        scriptInfo[scriptName].totalPassCount += passCount;
                    }
                }

                const recommendations = document.getElementById('recommendations');
                while (recommendations.rows.length > 1) {
                    recommendations.deleteRow(1);
                }

                Object.entries(scriptInfo).forEach(([scriptName, info]) => {
                    const recommendation = calculateWorkloadParameters(
                        info.totalPassCount,
                        info.totalPlannedTph,
                        info.thinkTime,
                        info.pacing,
                        info.vusers
                    );

                    const row = recommendations.insertRow(-1);
                    
                    row.insertCell(0).textContent = scriptName;
                    row.insertCell(1).textContent = info.totalPassCount.toFixed(0);
                    row.insertCell(2).textContent = info.totalPlannedTph;
                    
                    const changeCell = row.insertCell(3);
                    changeCell.textContent = recommendation.tphChangePercent.toFixed(1) + '%';
                    changeCell.className = `numeric ${recommendation.tphChangePercent > 0 ? 'increase' : 'decrease'}`;
                    
                    row.insertCell(4).textContent = info.thinkTime.toFixed(1) + 's';
                    row.insertCell(5).textContent = recommendation.thinkTime.toFixed(1) + 's';
                    row.insertCell(6).textContent = info.pacing.toFixed(1) + 's';
                    row.insertCell(7).textContent = recommendation.pacing.toFixed(1) + 's';
                    row.insertCell(8).textContent = info.vusers;
                    row.insertCell(9).textContent = recommendation.vusers;

                    [1,2,3,4,5,6,7,8,9].forEach(index => {
                        row.cells[index].className = 'numeric';
                    });
                });
            } catch (error) {
                alert('Error processing files: ' + error.message);
            }
        }
    </script>
</body>
</html>
