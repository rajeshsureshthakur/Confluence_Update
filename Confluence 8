-- Combine all CPU metrics tables
WITH UnifiedCPUMetrics AS (
    SELECT application_name, metric, value, 'T1' as source_table
    FROM T1
    UNION ALL
    SELECT application_name, metric, value, 'T2' as source_table
    FROM T2
    UNION ALL
    SELECT application_name, metric, value, 'T3' as source_table
    FROM T3
    UNION ALL
    SELECT application_name, metric, value, 'T4' as source_table
    FROM T4
),

-- Create a pivot of CPU metrics by application
CPUSummary AS (
    SELECT 
        application_name,
        MAX(CASE WHEN source_table = 'T1' THEN value END) as cpu_metric_t1,
        MAX(CASE WHEN source_table = 'T2' THEN value END) as cpu_metric_t2,
        MAX(CASE WHEN source_table = 'T3' THEN value END) as cpu_metric_t3,
        MAX(CASE WHEN source_table = 'T4' THEN value END) as cpu_metric_t4,
        -- Calculate average across all tables
        AVG(CAST(value AS FLOAT)) as avg_cpu_value
    FROM UnifiedCPUMetrics
    GROUP BY application_name
)

-- Final formatted output with health indicators
SELECT 
    application_name as "Application",
    COALESCE(cpu_metric_t1, 'N/A') as "CPU Metric (T1)",
    COALESCE(cpu_metric_t2, 'N/A') as "CPU Metric (T2)",
    COALESCE(cpu_metric_t3, 'N/A') as "CPU Metric (T3)",
    COALESCE(cpu_metric_t4, 'N/A') as "CPU Metric (T4)",
    ROUND(avg_cpu_value, 2) as "Average CPU",
    CASE 
        WHEN avg_cpu_value >= 80 THEN 'ðŸ”´ Critical'
        WHEN avg_cpu_value >= 60 THEN 'ðŸŸ¡ Warning'
        ELSE 'ðŸŸ¢ Healthy'
    END as "Status"
FROM CPUSummary
ORDER BY 
    avg_cpu_value DESC;
